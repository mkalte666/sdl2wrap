#!/bin/env python3
import re
import sys

if len(sys.argv) != 3:
    print("usage: " + sys.argv[0] + "<SDL_hints.h> <outfile>")
    exit(-1)

infile = open(sys.argv[1], "r")
hintsHeader = infile.read()

# find hint defines
allHints = re.finditer(r"#define\s+(SDL_HINT_([A-Z0-9_]+))\s+(\"[\w\s]+\")", hintsHeader)

enumBody = ""
convertBody = ""

for i, m in enumerate(allHints):

    hintDefine = m.group(1)
    hintName = m.group(2)
    hintString = m.group(3)
    # generate a nicer hintName for the c++ enum
    hintName = hintName.lower()
    hintName = hintName.capitalize()
    hintName = re.sub(r"_([a-z0-1A-Z]{1})", lambda pat : pat.group(1).upper(), hintName)
    enumBody += "    " + hintName + "=" + str(i) + ",\n"
    convertBody += "        case Hint::" + hintName + ": return " + hintDefine + ";\n"

fileContent = """/*
  SDL2 C++ Wrapper
  Copyright (C) 2020 Malte Kie√üling <mkalte@mkalte.me>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*/
/**
 * Everything in this file is autogenerated. Please use generateHints to update it! 
 */
#ifndef sdl2wrap_hints_generated
#define sdl2wrap_hints_generated 

// always first
#include "base.h"

namespace sdl2wrap {

enum class Hint {
%(enumBody)s
};

const char* hintToString(Hint hint) noexcept;

#ifdef SDL2WRAP_DEFINITIONS
SDL2WRAP_INLINE const char* hintToString(Hint hint) noexcept 
{
    switch(hint) {
%(convertBody)s
        default: break;
    };

    return "";
};
#endif // SDL2WRAP_DEFINITIONS

}; //namespace sdl2wrap 

#endif // sdl2wrap_hints_generated

""" % {"enumBody": enumBody, "convertBody": convertBody}

outfile = open(sys.argv[2], "w")
outfile.write(fileContent)
outfile.close()