/*
  SDL2 C++ Wrapper
  Copyright (C) 2020 Malte Kie√üling <mkalte@mkalte.me>

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*/
/**
 * Everything in this file is generated. Please use scripts/generate.py to update it! 
 */
#ifndef sdl2wrap_generated_SDL_log
#define sdl2wrap_generated_SDL_log

#include "SDL_log.h"

namespace sdl2wrap {

/**
 * \brief Scoped version of SDL_LogCategory
 * 
 * Generated From SDL_log.h:97
 * \sa SDL_LogCategory
 */
enum class LogCategory : Uint32 {
    CategoryApplication = SDL_LOG_CATEGORY_APPLICATION, ///< \wrapImpl SDL_LOG_CATEGORY_APPLICATION LogCategory::CategoryApplication autogenerated
    CategoryError = SDL_LOG_CATEGORY_ERROR, ///< \wrapImpl SDL_LOG_CATEGORY_ERROR LogCategory::CategoryError autogenerated
    CategoryAssert = SDL_LOG_CATEGORY_ASSERT, ///< \wrapImpl SDL_LOG_CATEGORY_ASSERT LogCategory::CategoryAssert autogenerated
    CategorySystem = SDL_LOG_CATEGORY_SYSTEM, ///< \wrapImpl SDL_LOG_CATEGORY_SYSTEM LogCategory::CategorySystem autogenerated
    CategoryAudio = SDL_LOG_CATEGORY_AUDIO, ///< \wrapImpl SDL_LOG_CATEGORY_AUDIO LogCategory::CategoryAudio autogenerated
    CategoryVideo = SDL_LOG_CATEGORY_VIDEO, ///< \wrapImpl SDL_LOG_CATEGORY_VIDEO LogCategory::CategoryVideo autogenerated
    CategoryRender = SDL_LOG_CATEGORY_RENDER, ///< \wrapImpl SDL_LOG_CATEGORY_RENDER LogCategory::CategoryRender autogenerated
    CategoryInput = SDL_LOG_CATEGORY_INPUT, ///< \wrapImpl SDL_LOG_CATEGORY_INPUT LogCategory::CategoryInput autogenerated
    CategoryTest = SDL_LOG_CATEGORY_TEST, ///< \wrapImpl SDL_LOG_CATEGORY_TEST LogCategory::CategoryTest autogenerated
    CategoryReserved1 = SDL_LOG_CATEGORY_RESERVED1, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED1 LogCategory::CategoryReserved1 autogenerated
    CategoryReserved2 = SDL_LOG_CATEGORY_RESERVED2, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED2 LogCategory::CategoryReserved2 autogenerated
    CategoryReserved3 = SDL_LOG_CATEGORY_RESERVED3, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED3 LogCategory::CategoryReserved3 autogenerated
    CategoryReserved4 = SDL_LOG_CATEGORY_RESERVED4, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED4 LogCategory::CategoryReserved4 autogenerated
    CategoryReserved5 = SDL_LOG_CATEGORY_RESERVED5, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED5 LogCategory::CategoryReserved5 autogenerated
    CategoryReserved6 = SDL_LOG_CATEGORY_RESERVED6, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED6 LogCategory::CategoryReserved6 autogenerated
    CategoryReserved7 = SDL_LOG_CATEGORY_RESERVED7, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED7 LogCategory::CategoryReserved7 autogenerated
    CategoryReserved8 = SDL_LOG_CATEGORY_RESERVED8, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED8 LogCategory::CategoryReserved8 autogenerated
    CategoryReserved9 = SDL_LOG_CATEGORY_RESERVED9, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED9 LogCategory::CategoryReserved9 autogenerated
    CategoryReserved10 = SDL_LOG_CATEGORY_RESERVED10, ///< \wrapImpl SDL_LOG_CATEGORY_RESERVED10 LogCategory::CategoryReserved10 autogenerated
    CategoryCustom = SDL_LOG_CATEGORY_CUSTOM, ///< \wrapImpl SDL_LOG_CATEGORY_CUSTOM LogCategory::CategoryCustom autogenerated
};
inline bool operator==(SDL_LogCategory a, LogCategory b) noexcept
{
    return a == static_cast<SDL_LogCategory>(b);
}
inline bool operator==(LogCategory a, SDL_LogCategory b) noexcept
{
    return a == static_cast<LogCategory>(b);
}

/**
 * \brief Scoped version of SDL_LogPriority
 * 
 * Generated From SDL_log.h:111
 * \sa SDL_LogPriority
 */
enum class LogPriority : Uint32 {
    PriorityVerbose = SDL_LOG_PRIORITY_VERBOSE, ///< \wrapImpl SDL_LOG_PRIORITY_VERBOSE LogPriority::PriorityVerbose autogenerated
    PriorityDebug = SDL_LOG_PRIORITY_DEBUG, ///< \wrapImpl SDL_LOG_PRIORITY_DEBUG LogPriority::PriorityDebug autogenerated
    PriorityInfo = SDL_LOG_PRIORITY_INFO, ///< \wrapImpl SDL_LOG_PRIORITY_INFO LogPriority::PriorityInfo autogenerated
    PriorityWarn = SDL_LOG_PRIORITY_WARN, ///< \wrapImpl SDL_LOG_PRIORITY_WARN LogPriority::PriorityWarn autogenerated
    PriorityError = SDL_LOG_PRIORITY_ERROR, ///< \wrapImpl SDL_LOG_PRIORITY_ERROR LogPriority::PriorityError autogenerated
    PriorityCritical = SDL_LOG_PRIORITY_CRITICAL, ///< \wrapImpl SDL_LOG_PRIORITY_CRITICAL LogPriority::PriorityCritical autogenerated
    LogPriorities = SDL_NUM_LOG_PRIORITIES, ///< \wrapImpl SDL_NUM_LOG_PRIORITIES LogPriority::LogPriorities autogenerated
};
inline bool operator==(SDL_LogPriority a, LogPriority b) noexcept
{
    return a == static_cast<SDL_LogPriority>(b);
}
inline bool operator==(LogPriority a, SDL_LogPriority b) noexcept
{
    return a == static_cast<LogPriority>(b);
}

}; // namespace sdl2wrap

#endif // sdl2wrap_generated_*
